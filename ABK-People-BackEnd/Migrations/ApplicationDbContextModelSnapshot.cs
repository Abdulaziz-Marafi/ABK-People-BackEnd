// <auto-generated />
using System;
using ABK_People_BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABK_People_BackEnd.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ABK_People_BackEnd.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MessageId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.MessageFile", b =>
                {
                    b.Property<int>("MessageFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageFileId"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("MessageFileId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageFiles");
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsClicked")
                        .HasColumnType("bit");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("TypeOfRequest")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Requests");

                    b.HasDiscriminator<string>("RequestType").HasValue("Request");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.ComplaintRequest", b =>
                {
                    b.HasBaseType("ABK_People_BackEnd.Models.Request");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfComplaint")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Complaint");
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.VacationRequest", b =>
                {
                    b.HasBaseType("ABK_People_BackEnd.Models.Request");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeOfVacation")
                        .HasColumnType("int");

                    b.ToTable("Requests", t =>
                        {
                            t.Property("RequestStatus")
                                .HasColumnName("VacationRequest_RequestStatus");
                        });

                    b.HasDiscriminator().HasValue("Vacation");
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.Admin", b =>
                {
                    b.HasBaseType("ABK_People_BackEnd.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = "admin1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e84a3ad3-e59e-4f40-9729-8560e3a69e50",
                            Email = "admin@company.com",
                            EmailConfirmed = false,
                            FirstName = "Abdulaziz",
                            LastName = "Marafi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COMPANY.COM",
                            NormalizedUserName = "ADMIN@COMPANY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3Xn04GosxL77uMLDxYL9TRTvf8yn+rn5CnTPxqo3i17DGjl4k51KYT0PcSy2PvlA==",
                            PhoneNumberConfirmed = false,
                            Position = 0,
                            SecurityStamp = "db19ab3a-6383-4a7d-9057-757b8a346066",
                            TwoFactorEnabled = false,
                            UserName = "admin@company.com"
                        },
                        new
                        {
                            Id = "admin2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bbe7636-18f6-4257-b97c-41b0f063dc83",
                            Email = "admin2@company.com",
                            EmailConfirmed = false,
                            FirstName = "Ahmad",
                            LastName = "Damra",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@COMPANY.COM",
                            NormalizedUserName = "ADMIN2@COMPANY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO14zXPVgnd6d1ecbbPvS2XPZbhUthyQoZo3Zr9dE7AtCxAQcmvGqL78jSvs582f3A==",
                            PhoneNumberConfirmed = false,
                            Position = 3,
                            SecurityStamp = "f5afff01-3236-4f0e-83a5-bf3e963efa60",
                            TwoFactorEnabled = false,
                            UserName = "admin2@company.com"
                        });
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.Employee", b =>
                {
                    b.HasBaseType("ABK_People_BackEnd.Models.User");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<bool>("IsVacation")
                        .HasColumnType("bit");

                    b.Property<int>("SickDays")
                        .HasColumnType("int");

                    b.Property<float>("VacationDays")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = "emp1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7d4cd34-f60c-42dd-b1ee-447632eaac46",
                            Email = "employee@company.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@COMPANY.COM",
                            NormalizedUserName = "EMPLOYEE@COMPANY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFyCgyDXUKX86cuNvG71effke0Crt/IePsr8RAoS3i7zVL7kyk91M+UL1pnJRrOWeg==",
                            PhoneNumberConfirmed = false,
                            Position = 2,
                            SecurityStamp = "063e451b-1bcc-45c2-a0b3-d62390a9d61b",
                            TwoFactorEnabled = false,
                            UserName = "employee@company.com",
                            Department = 0,
                            IsVacation = false,
                            SickDays = 15,
                            VacationDays = 30f
                        },
                        new
                        {
                            Id = "emp2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8d86d70-8e11-4850-ae05-4b7ac896db69",
                            Email = "employee2@company.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE2@COMPANY.COM",
                            NormalizedUserName = "EMPLOYEE2@COMPANY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPy03TwH9uP3IUWmn5SAlGLW18YqGUWIRuwMrxUo+mV7Lyw1HPlAMziXdI2K463BNA==",
                            PhoneNumberConfirmed = false,
                            Position = 5,
                            SecurityStamp = "e2461175-b281-4248-add3-10b4504b5a72",
                            TwoFactorEnabled = false,
                            UserName = "employee2@company.com",
                            Department = 1,
                            IsVacation = false,
                            SickDays = 10,
                            VacationDays = 25f
                        });
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.Message", b =>
                {
                    b.HasOne("ABK_People_BackEnd.Models.Request", "Request")
                        .WithMany("Messages")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ABK_People_BackEnd.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.MessageFile", b =>
                {
                    b.HasOne("ABK_People_BackEnd.Models.Message", "Message")
                        .WithMany("Files")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.Request", b =>
                {
                    b.HasOne("ABK_People_BackEnd.Models.Employee", "Employee")
                        .WithMany("Requests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ABK_People_BackEnd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ABK_People_BackEnd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABK_People_BackEnd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ABK_People_BackEnd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.Message", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.Request", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ABK_People_BackEnd.Models.Employee", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
